#!/bin/sh
#

# These are some of my "workhorse" aliases.
# There are a lot of fancier ones which come up less frequently
# which I'll put somewhere else eventually.

alias g='git'
alias gb='git branch'
alias gc='git checkout'
alias gcl='git clone'
alias gd='git diff'

# gl and gll differ only in completion - gll is local branches only
alias gl='git log --abbrev=10 --abbrev-commit --date=relative'
alias gll='git log --abbrev=10 --abbrev-commit --date=relative'

# branching, committing
alias gbgrep='git branch -a | grep $*'
alias gpwb='basename $(git symbolic-ref HEAD)'  # i.e. "git print-working-branch"
alias gup='git checkout master && git pull && git remote update -p'
alias gupd='git commit -a --amend --reuse-message=HEAD'
alias gca='git commit -a --amend --reedit-message=HEAD'
alias gam='git commit -a -m'

# merging, rebasing, modifying the tree
alias grh='git reset --hard'
alias grhh='git reset --hard HEAD^'
alias gmm='git merge master'
alias grm='git rebase master'
alias grim='git rebase -i master'
alias gra='git rebase --abort'

# log/info
alias glog-nm='git log --no-merges ^master'
alias glog-this='git log --no-merges ^master HEAD'
alias glog-dump='git --no-pager log --format=%B master..'
alias glog..='git log --no-merges master.. -- src'
alias glog2="git log --simplify-by-decoration --date-order --format='%Cred%h%Creset %s %Cgreen(%cr)%Creset' --abbrev=10 --abbrev-commit --graph --decorate --date=relative"
alias glog3="git log --graph --pretty=format:'%Cred%h%Creset - %C(yellow)%an%Creset %m - %s %Cgreen(%cr)%Creset' --abbrev=10 --abbrev-commit --date=relative"
alias gdesc='git describe --always'

# diff
alias gdm='git diff -w master'
alias gdh='git diff -w HEAD^ HEAD'
alias gdm..='git diff -w master..'
alias gdsm..='git diff -w --stat master..'

alias gds='git diff -w --stat=150,150'
alias gdsh='git diff -w --stat=150,150 HEAD^'
alias gdsm='git diff -w --stat=150,150 master'

# obscurer but useful things
alias git-checkout-all='git fetch . refs/remotes/*:refs/HEADs/*'
alias git-local-checkout-all='git co HEAD^ && git fetch . refs/remotes/origin/*:refs/HEADs/* && git co master && git branch -D HEAD'
alias git-show-blobs='git verify-pack -v .git/objects/pack/pack-*.idx | sort -k3n'
alias git-ls-remote-tags='git ls-remote --tags origin'

# Merge with sane options, resolving conflicts for ours or theirs
gm-ours () {
  git-merge-with-opts -X ours ${1:-master}
}
gm-theirs () {
  git-merge-with-opts -X theirs ${1:-master}
}
gsquash-ours () {
  gsquash -X ours ${1:-master}
}
gsquash-theirs () {
  gsquash -X theirs ${1:-master}
}
git-merge-with-opts () {
  git merge -s recursive -X patience -X ignore-space-change "$@"
}
gsquash () {
  [[ $# -gt 0 ]] || {
    echo "Don't run this directly: run gsquash-ours or gsquash-theirs."
    echo "Or, supply the branch you want to merge from."
    return
  }
  local desc=$(git describe --always)
  echo "Squashing all non-master commits into one.  If something"
  echo "goes wrong, revert to initial state by running:"
  echo "  git reset --hard $desc"
  echo ""
  
  git-merge-with-opts --quiet "$@" || return
  echo "New/changed files: $(git diff --name-only master..)"
  echo ""
  git reset master && 
  for f in "$(git diff --name-only master..)"; do git add "$f"; done &&
  git commit -F <(git --no-pager log --no-merges --format=%B master..$desc)
}

# completing on branches only, no paths
complete -F _git_branch gb grh
complete -F _git_branch_local_only gds gmad gm-ours gm-theirs gsquash gsquash-ours gsquash-theirs

# branches and paths
complete -o default -F _git_branch gc gl

for cmd in $(cat <<EOM
gll
gdm..
gdsm..
git-diff-find-revs
git-diff-grep
git-diff-grep-revs
EOM
) ; do complete -o default -F _git_branch_local_only $cmd ; done

#!/usr/bin/env bash
#

[[ -d "$JRUN_HOME" ]] || [[ -d ~/.jrun ]] || { echo "JRUN_HOME must be set, or ~/.jlib exist."; exit 1; }

. ~/.jrun/lib/shared.sh
jrunInit

ivyjar_path="$jrun_home/lib/ivy.jar"
ivyjar_url="http://repo1.maven.org/maven2/org/apache/ivy/ivy/2.2.0/ivy-2.2.0.jar"
tmpdir=$(mktemp -d -t jrun)
scalaVersion="2.9.1.RC4"

ensure_jar () {
  local path="$1"
  local url="$2"
  
  [[ -f "$path" ]] || {
    mkdir -p "$(dirname "$path")" &&
    curl -s -o "$path" "$url"
  }
}

# -main <main>                 the FQCN of the main class to launch
# -args <args>                 the arguments to give to the launched process
# -cp <cp>                     extra classpath to use when launching process
fetch3 () {
  local org="$1"
  local module="$2"
  local revision="$3"
  local cachepath=$(mktemp -t jrun)
  local args=$(cat <<EOM
java
-Divy.settings.dir=$jrun_home/lib
-jar $ivyjar_path
-types jar
-settings $jrun_home/lib/ivysettings.xml
-dependency $org $module $revision
-cachepath $cachepath
EOM
  )

  $args >"$jrun_home/last-output.log"
  cat "$cachepath"
}

split-artifact-string () {
  local scalaVersion="$1"
  local string="$2"
  local SAVED_IFS="$IFS"

  IFS="%"
  echo "$string" | tr -d ' ' | read -a fields
  IFS="$SAVED_IFS"

  local org="${fields[0]}"
  local artifact="${fields[1]}"
  local revision=""

  if [[ "$artifact" == "" ]]; then
    module="${fields[2]}_${scalaVersion}"
    revision="${fields[3]}"
  else
    revision="${fields[2]}"
  fi

  echo "$org $artifact $revision"
}

# mkString-stdin () {
#   local sep="$1"
#   shift
#   local savedIFS="$IFS"
#   IFS="$sep"
#   echo "$*"
#   IFS="$savedIFS"
# }
# 
# mkString-stdin () {
#   local sep="$1"
#   local first=1
# 
#   while read line; do
#     if (( $first )); then
#       first=0
#       printf "%s" "$line"
#     else
#       printf "${sep}%s" "$line"
#     fi
#   done
# }
# 
# map () {
#   local fxn="$@"
# 
#   while read line; do
#     $fxn $line
#   done
# }
# 
# filter () {
#   local fxn="$@"
# 
#   while read line; do
#     if $fxn $line; then
#       echo "$line"
#     fi
#   done
# }
# 
# collect () {
#   local fxn="$@"
# 
#   while read line; do
#     result=$($fxn $line)
#     if [[ -n "$result" ]]; then
#       echo "$result"
#     fi
#   done
# }
# 
# 
# 
# 
# ensure_jar "$ivyjar_path" "$ivyjar_url" && {
#   
#   
#   
#   
#   for arg; do 
#     fetch3 $(split-artifact-string "$scalaVersion" "$arg")
#   done | mkString-stdin :
# }

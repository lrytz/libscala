#!/usr/bin/env bash
#
# Create a "collection" from a specification.
# The elements of the collection are lines of output.

#!/usr/bin/env bash
#
# Format string

set -e

command="echo %f %c %s"
package=""
packagepath=""
grep=""

usage () {
  cat <<EOM
Usage: $(basename $0) [-h] [-c command] [-g grep] path path ...
  -h: print this message
  -g: set a filter to limit classfile selection
  -p: set a package filter
  -c: a command to be executed on each classfile, with substitutions:
        %f  filename
        %c  classname
        %s  source

Paths are classpath entries, jars or directories.
Example usage:
  $(basename $0) -c "javap -classpath %s %c" -g immutable scala-*.jar
EOM
}

[[ $# -gt 0 ]] || { usage ; exit 0; }

file-to-class () {
  echo ${1%.class} | tr '/' '.' | sed -e 's/^[./]*//g'
}

interpolate () {
  local filename="$1"
  local classname="$2"
  local source="$3"
  
  s1=${command//%f/"'$filename'"}
  s2=${s1//%c/"'$classname'"}
  s3=${s2//%s/"$source"}
  
  echo $s3
}

abspath () {
  if [[ -d "$1" ]]; then
    echo $(cd "$1"; pwd)
  elif [[ -d $(dirname "$1") ]]; then
    echo "$(cd $(dirname "$1"); pwd)/$(basename "$1")"
  else
    echo "$1"
  fi
}

source-dir () {
  if [[ -d "$1" ]]; then
    echo "$1"
  else
    local jardir=$(mktemp -d -t foreach-class)
    pushd "$jardir" >/dev/null
    jar xf "$1" "$packagepath"
    popd >/dev/null
    echo "$jardir"
  fi
}

traverse-source () {
  local source="$1"
  local dir=$(source-dir "$source")

  pushd $dir >/dev/null
  for file in $(find . -name '*.class')
  do
    classname="$(file-to-class $file)"
    filename="$(abspath $file)"
    
    if [[ ! $grep ]] || [[ $classname =~ $grep ]]; then
      cmd=$(interpolate "$filename" "$classname" "$source")
      echo "% $cmd"
      eval "$cmd"
      echo ""
    fi
  done
  popd >/dev/null
}

while getopts :c:g:p: opt; do
  case $opt in
    c) command="$OPTARG" ;;
    g) grep="$OPTARG" ;;
    p) package="$OPTARG" ; packagepath=$(echo $package | tr '.' '/') ;;
    :) echo "Option -$OPTARG requires an argument." >&2 ; exit 1 ;;
    *) echo "Unrecognized argument $OPTARG" ; exit 1 ;;
  esac
done

shift $((OPTIND-1))
targets="$@"

for target in $targets;
do
  traverse-source $(abspath $target)
done


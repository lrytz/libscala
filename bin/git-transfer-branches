#!/usr/bin/env bash
#

# set -o errexit  # exit on errors
# 

# set -e

[[ $# -ge 2 ]] || { echo "Usage: $0 <src gitdir> <dest gitdir> [branch branch ...]"; exit 1; }

unset cd

src=$1
dest=$2
shift 2

branches="$@"
[[ -n $branches ]] || branches=$(cd $src/.git/refs/heads && find . -type f | sed 's/^\.\///')

function exists() {
  ( cd $dest && git show-ref --verify "refs/heads/$1" &> /dev/null )
}

# cd $src
# branches=$(cd $src && git branch -r | grep "${remote}/")

succ=""
fail=""

for branch in $branches; do
  diffs=$(cd $src && git shortlog master..$branch | wc -l)
  branchname=$(cd $src && basename $branch)

  if [[ $diffs -gt 50  ]]; then
    echo "Skipping $branch, not based on expected master."
    fail="$fail $branchname"
    continue
  fi
  
  if exists "$branchname"; then
    echo "Skipping $branch: already exists in $dest."
    fail="$fail $branchname"
    continue
  fi
  
  tmp=$(mktemp -dt git-transfer)
  cd "$src" && git checkout --quiet $branch && \
    git format-patch -o $tmp -M -B -C master &> /dev/null && \
    echo "Applying $diffs patches to $branchname:"
  status=$?

  [[ $status -eq 0 ]] || {
    echo "git-format-patch failed for $branch, skipping."
    fail="$fail $branchname"
    continue
  }
  
  cd "$dest" && \
    git checkout --quiet -b $branchname master && \
    git am --quiet --3way $tmp/*.patch
  status=$?
  
  if [[ $status -eq 0 ]]; then
    succ="$succ $branchname"
    git checkout --quiet master
  else
    echo "$branchname failed, aborting it."
    git am --abort
    git reset --hard
    git clean --quiet -f -d .
    git checkout -f --quiet master
    git branch -D $branchname
    fail="$fail $branchname"
  fi

  rm -rf "$tmp"
done

git checkout -f master
echo "Moved: $succ"
echo "Failed: $fail"
